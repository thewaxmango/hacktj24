<!DOCTYPE html>
<html>

<head>
        <script src="https://unpkg.com/konva@9.3.3/konva.min.js"></script>
        <meta charset="utf-8" />
        <title>Konva Drag and Drop a Group Demo</title>
        <style>
                body {
                        margin: 0;
                        padding: 0;
                        overflow: hidden;
                        background-color: #f0f0f0;
                }
        </style>
</head>

<body>
        <div id="container"></div>
        <script>
                var width = window.innerWidth;
                var height = window.innerHeight;
                var stage = new Konva.Stage({
                        container: 'container',
                        width: width,
                        height: height,
                });
                var layer = new Konva.Layer();
                let balls = []
                for (let i = 0; i < 2; i++) {
                        let group = new Konva.Group({
                                draggable: true,
                        });
                        var box = new Konva.Rect({
                                x: i * 30 + 10,
                                y: i * 18 + 40,
                                width: 50,
                                height: 50,
                                name: "target"+i,
                                fill: 'red',
                                stroke: 'black',
                                strokeWidth: 4,
                        });
                        group.add(box);
                        group.on('mouseover', function() {
                                document.body.style.cursor = 'pointer';
                        });
                        group.on('mouseout', function() {
                                document.body.style.cursor = 'default';
                        });
                        group.on('dragend', function(){
                                redrawLines();
                                console.log("WOW finsihed ");
                        });
                        balls.push(group)
                }
                for (let i = 0; i < balls.length; i++) {
                        layer.add(balls[i]);
                        console.log(balls[i]);
                }
                let drawingLine = false;
                let line;
                let lines = [];
                let coords = [];
                let linehe = [];
                function redrawLines(){
                        linehe.forEach((x)=>{
                                x.destroy();
                        });
                        lines.forEach((x)=>{
                                console.log(lines);
                                console.log(x);
                                line = new Konva.Arrow({
                                        stroke: 'black',
                                        // remove line from hit graph, so we can check intersections
                                        listening: false,
                                        points: [balls[x[0]].x()+40, balls[x[0]].y()+100, balls[x[1]].x()+40, balls[x[1]].y()+100]
                                });
                                linehe.push(line)
                                layer.add(line)
                                line = null;
                        });
                }
                for(let i  = 0; i< balls.length; i++){
                        balls[i].on('mousedown', (e) => {
                          if (e.evt.button === 2) {
                                drawingLine = true;
                                const pos = stage.getPointerPosition();
                                line = new Konva.Arrow({
                                        stroke: 'black',
                                        // remove line from hit graph, so we can check intersections
                                        listening: false,
                                        points: [balls[i].x()+50, balls[i].y()+100, pos.x, pos.y]
                                });
                                coords.push(i);
                                layer.add(line);
                          }
                        });
                }
                stage.on('mouseover', (e) => {
                        if (e.target.getName().includes("target")) {
                                e.target.stroke('black');
                                layer.draw();
                        }
                });
                stage.on('mouseout', (e) => {
                        if (e.target.getName().includes("target")) {
                                e.target.stroke(null);
                                layer.draw();
                        }
                });
                stage.on('mousemove', (e) => {
                        if (!line) {
                                return;
                        }
                        const pos = stage.getPointerPosition();
                        const points = line.points().slice();
                        points[2] = pos.x;
                        points[3] = pos.y;
                        line.points(points);
                        layer.batchDraw();
                });
                stage.on('mouseup', (e) => {
                        if (!line) {
                                return;
                        }
                        console.log(e.target.getName())
                        if (!(e.target.getName().includes("target"))) {
                                console.log("SDFSDFSDF")
                                line.destroy();
                                layer.draw();
                                line = null;
                        } else {
                                coords.push(e.target.getName().substring(6))
                                if(coords.length==2){
                                        lines.push(coords)
                                        linehe.push(line)
                                        console.log(lines)
                                        coords = [];
                                }
                                line = null;
                        }
                });
                stage.add(layer);
document.addEventListener('contextmenu', event => {
    event.preventDefault();
});
        </script>
</body>
</html>
